init module {
	knowledge{
		% Decides wether a certain level is on route (e.g. if we keep moving in the same direction do we get to that level. Returns true if no direction is set.
		onRoute(Level) :- carPosition(Cur), moveDir(no).
		onRoute(Level) :- carPosition(Cur), moveDir(Dir), Diff is Cur - Level, (Diff<0 -> Dir = up; Dir=down).

		% Gives the direction the car is currently moving in. If the car is stationary, Dir = no.
		moveDir(Dir) :- moving(Level1, Level2), Diff is Level1 - Level2, (Diff < 0 -> Dir=up; Dir=down).
		moveDir(Dir) :- not(moving(_, _)), Dir = no.		
		
		% fs computes the quality for each level.
		% It makes a distinction between eButton (people who are in the cart) and fButtons (people who are waiting at some floor). 
		% eButtons get a bonus if the elevator is getting full
		fs(Level, Dir, Type, Q) :- Type = e, people(Pop), capacity(Cap), carPosition(Cur), floorCount(Fl), onRoute(Level), Q is ((Fl + 2) - abs(Cur - Level) + (Pop/Cap)*(0.5 * Fl)).
		% fButtons only get a penalty if the elevator is full.
		fs(Level, Dir, Type, Q) :- Type = f, (elevatorFull -> Penalty = 1000; Penalty = 0), carPosition(Cur), floorCount(Fl), moveDir(Dir), onRoute(Level), Q is ((Fl + 2) - abs(Cur - Level) - Penalty).
		fs(Level, Dir, Type, Q) :- Type = f, (elevatorFull -> Penalty = 1000; Penalty = 0), carPosition(Cur), floorCount(Fl), moveDir(Dir2), not(Dir = Dir2), onRoute(Level), Q is ((Fl + 0) - abs(Cur - Level) - Penalty).
		fs(Level, Dir, Type, Q) :- (elevatorFull, Type = f -> Penalty = 1000; Penalty = 0), not(onRoute(Level)), Q is 1 - Penalty.
		
		% Calculates the maximum levelQuality in a list of levelQuality(Level, Dir, Q) percepts.
		maxFS([H|T], M) :- maxFS(T, H, M).
		
		% To improve performance, this is executed from tail to head.
		maxFS([], M, M).
		maxFS([levelQuality(Level, Dir, Q) | T], levelQuality(Level2, Dir2, Q2), levelQuality(Level3, Dir3, Q3)) :- Max is max(Q, Q2), 
			(Max = Q2 -> maxFS(T, levelQuality(Level2, Dir2, Q2), levelQuality(Level3, Dir3, Q3));  maxFS(T, levelQuality(Level, Dir, Q), levelQuality(Level3, Dir3, Q3))).  
		
		% For each gotoFloor in the first list, the quality is calculated to go there using the fs\4 predicate
		calculateFS([], []).
		calculateFS([gotoFloor(Level, Dir, Type) | T], [levelQuality(Level, Dir, Q) | T2]) :- calculateFS(T, T2), fs(Level, Dir, Type, Q).
		
		% True if the number of people in the elevator is equal to the capacity
		elevatorFull :- capacity(N), people(N).
		
		% True if there are no jobs left and we're not moving.
		free :- not(moving(_, _)), jobsLeft(L), length(L, 0).
		
		% Used to make sure that goals are actually reached if we arrived at the correct floor and direction
		gotoFloor(L, Dir, e) :- atFloor(L).
		gotoFloor(L, Dir, f) :- atFloor(L), dir(Dir).
		
		% Used to convert the result of the listall predicate to a nice jobsLeft list to enter into the believe base
		makeNice([], []).
		makeNice([[Level, Dir, Type]|T], [gotoFloor(Level, Dir, Type)|T2]) :- makeNice(T, T2).
	}
	
	beliefs{
		% The direction that will be shown to the people at the next stop.
		dir(no).
		
		% Initially, it is unknown whether doors are open or closed.
		doorState(unknown).
		
		% The carposition is actually unknown but we set it to 0.
		carPosition(0).
		
		% Initial list of last jobs left. Used to replace by the actual jobs once they come available
		lastJobsLeft([]).
		
		% The number of people initially in the elevator
		people(0).
		
		% managerBeliefs is used to check if some information has changed since it was last send to the manager. 
		managerBeliefs(people(0)).
		managerBeliefs(jobsLeft([])).
		managerBeliefs(carPosition(0)).
	}
	
	actionspec{
		% The action goto(Level, Dir) moves the elevator car to floor Level. 
		% When the elevator arrives at the requested floor, the Dir light will turn on.
		goto(Level, Dir) {
		   pre{dir(OldDir) }
		   post{dir(Dir), not(dir(OldDir)), sendDir(Dir) }
		}
	}
}
	
main module{
	program{
		%%%%%% Goal Management %%%%%%		
		% gotoOnce is send by the manager to fix the initial distribution of the elevators. When this is received, a goto is adopted
		forall bel(received(manager, gotoOnce(L, Dir)), atFloor(AtL)) do goto(L, Dir) + insert(moving(AtL, L)) + delete(received(manager, gotoOnce(L, Dir)) ).
				
		% Make sure that the moving\2 predicate is removed from believes if we arrived at that floor
		if bel( atFloor(L2), moving(L1, L2)) then delete(moving(L1, L2)).
		
		% If we picked up some people at a floor, send this to the manager. This is to make sure that a job can be redistributed if we failed to pick up all clients
		forall goal-a(gotoFloor(Level, Dir, Type)) do send(manager, pickup(Level, Dir)).

		% Update the plan (adopt a new goto) when needed
		if goal(updatePlan) then drop(updatePlan) + updatePlan.
	}
}

module updatePlan {
	program {
		% Goto the floor with the highest fs that the agent wants to go to
		if bel(jobsLeft(L), carPosition(Cur), calculateFS(L, FSL), maxFS(FSL, levelQuality(BestLevel, BestDir, Q))) then {
			% Make sure that moving is changed from the old to the new state if a current movement is interrupted because a new plan has come available.
			if bel(moving(L1, L2)) 
				then goto(BestLevel, BestDir) + delete(moving(L1, L2)) + insert(moving(Cur, BestLevel)).
			if true
				then goto(BestLevel, BestDir) + insert(moving(Cur, BestLevel)).
		}
	}
}

event module{
	program{
		% Make sure that we know if the manager is ready to receive messages
		if bel(managerReady) then delete(managerReady).
		forall bel(received(manager, readyForMore)) do delete(received(manager, readyForMore)) + insert(managerReady).
		
		% If we are assigned as the leading agent by the manager, we should know this to make sure we sent the manager fButton information
		if bel(received(manager, leader)) then insert(leader) + delete(received(manager, leader)).
		
		%%%%% Percept Processing %%%%%		
		% Capacity is the number of people that fit in the elevator
		forall bel( percept(capacity(N) )) do send(manager, capacity(N) ) + insert(capacity(N)).
		
		% floorCount in the number of floors in the elevator
		forall bel( percept(floorCount(N) )) do send(manager, floorCount(N) )  + insert(floorCount(N)).
		
		% People is the number of people currently in the elevator
		forall bel( percept(people(N) ), people(N2), not(N = N2)) do insert(people(N)) + delete(people(N2)).
		
		
		% carPosition is the exact position of the car. Because the manager gets flooded with messages if each car position is send, it only gets send when it changes by more then a quarter of a floor. 
		forall bel( percept(carPosition(L) ), carPosition(L2), RoundedL is round(L*4) / 4, not(RoundedL = L2 )) do insert( carPosition(RoundedL) ) + delete(carPosition(L2) ).
		
		% The atFloor(Level) percept is received only when elevator has st opped at a floor Level.
		forall bel( percept(atFloor(Level)), not(atFloor(Level)) ) do insert( atFloor(Level) ).
		forall bel( atFloor(Level), not(percept(atFloor(Level))) ) do delete( atFloor(Level) ).
		
		% For each eButton press adopt goal to go there
		forall bel( percept(eButtonOn(Level)) ), a-goal(gotoFloor(Level, Dir2, f), not(gotoFloor(Level, Dir2, e) )) do  adopt(gotoFloor(Level, Dir2, e)).
		forall bel( percept(eButtonOn(Level)), dir(Dir)) do adopt(gotoFloor(Level, Dir, e)).
		
		% The fButton(Level,Dir) percept indicates that the up or down (Dir) button on floor Level has been pressed.
		% If an fButton stopped being pressed, send the manager that the fButton is no longer pressed
		forall bel( fButtonOn(Level,Dir), not(percept(fButtonOn(Level,Dir)))) do {
			if bel(leader) then send( manager, delFButtonOn(Level, Dir) )+delete( fButtonOn(Level,Dir) ).
			if bel(not(leader)) then delete( fButtonOn(Level,Dir) ).
		}
		% If a new fButton is pressed, send it to the manager
		forall bel( percept(fButtonOn(Level,Dir)), not(fButtonOn(Level,Dir))) do {
			if bel(leader) then send( manager, fButtonOn(Level,Dir) )+insert( fButtonOn(Level,Dir) ).
			if bel(not(leader)) then insert(fButtonOn(Level, Dir)).
		}
		
		% If an fButton is no longer pressed, drop the goal to go there
		forall goal(gotoFloor(Level, Dir, f)), bel(not(fButtonOn(Level,Dir))) do drop(gotoFloor(Level, Dir, f)).

		
		%%%%% Message processing %%%%%%%%%
		% If the manager send any commands, put them in the goal base
		forall bel(received(manager,goto(L, Dir))) do delete(received(manager,goto(L, Dir))) + adopt(gotoFloor(L, Dir, f)).
		
		% Save the jobsLeft currently believed
		if bel(jobsLeft(L), lastJobsLeft(L2), not(L = L2)) then delete(lastJobsLeft(L2)) + insert(lastJobsLeft(L)).
		
		% To calculate the best floor to go to a list is needed of all jobs currently in the goal.
		% This is done by using listall to find all gotoFloor goals and then copying the result of this list into a new list. 
		% If there are no gotoFloor goals left, an empty list is inserted
		forall bel(jobsLeft(L)) do delete(jobsLeft(L)).
		listall L <- goal(gotoFloor(A, B, C)) do insert(jobsLeftUgly(L)).
		if bel(jobsLeftUgly(L), makeNice(L, L2)) then insert(jobsLeft(L2)) + delete(jobsLeftUgly(L)). 
		if not(goal(gotoFloor(A, B, C))) then insert(jobsLeft([])).

		% If the list with jobsLeft changed since last time, then we want to check if maybe the current plan is incorrect
		if bel(lastJobsLeft(L), not(jobsLeft(L))) then adopt(updatePlan).
		
		% The doorState percept is received only if the door state has changed.
		% So we do not need to check whether the New value is different from the Old value to avoid unnecessary updates.
		forall bel( percept(doorState(New)), doorState(Old) ) do delete(doorState(Old)) + insert( doorState(New) ).		
		
		% If the manager is ready, send all changes to it.
		forall bel(managerReady, managerBeliefs(carPosition(L)), not(carPosition(L)), carPosition(L2)) do send(manager, carPosition(L2)) +delete(managerBeliefs(carPosition(L))) + insert(managerBeliefs(carPosition(L2))). 
		forall bel(managerReady, managerBeliefs(people(N)), not(people(N)), people(N2)) do send(manager, people(N2)) + delete(managerBeliefs(people(N))) + insert(managerBeliefs(people(N2))).
		forall bel(managerReady, managerBeliefs(jobsLeft(L)), not(jobsLeft(L)), jobsLeft(L2)) do send(manager, jobsLeft(L2)) + delete(managerBeliefs(jobsLeft(L))) + insert(managerBeliefs(jobsLeft(L2))).
		forall bel(moveDir(Dir1), sent(moveDir(Dir2)), not(Dir1 = Dir2) ) do send(manager, moveDir(Dir1)) + delete(sent(moveDir(Dir2))).
		
		%%%%% Some tricks %%%%%%
		% If there is an eButton and an fButton goal on the same floor, but they have different directions, then change the eButton. This makes sure that people are picked up.
		forall goal(gotoFloor(Level, Dir, e), gotoFloor(Level, Dir2, f), not(Dir = Dir2)) do drop(gotoFloor(Level, Dir, e)) + insert(gotoFloor(Level, Dir2, e)).
	}
}
