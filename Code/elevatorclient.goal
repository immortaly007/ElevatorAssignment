init module {
	knowledge{
		% insert knowledge here, if any, or remove section.
		moveDir(Dir) :- moving(Level1, Level2), Diff is Level1 - Level2, (Diff < 0 -> Dir=up; Dir=down).
		moveDir(Dir) :- not(moving(_, _)), dir(Dir).
	}
	
	beliefs{
		% The direction that will be shown to the people at the next stop.
		% This remains the intended direction of movement until there are no more
		% planned stops in that direction.
		dir(down).
		% Initially, it is unknown whether doors are open or closed.
		doorState(unknown).
		
		carPosition(0).
		
		moveDir(up).
		
		sent(moveDir(nothing)).
	}
	
	goals{
		% insert initial goals here, if any, or remove section.
	}
	
	program {
        % insert one-time rules here, or remove section
    }
	
	actionspec{
		% The action goto(Level, Dir) moves the elevator car to floor Level. It can
		% only be performed if the elevator car is docked and not moving, i.e.,
		% atFloor(Here) holds for some Here.
		% When the elevator arrives at the requested floor, the Dir light will turn on.
		goto(Level, Dir) {
		   pre{ atFloor(Here), dir(DirNow) }
		   post{ not(dir(DirNow)), dir(Dir), sendDir(Dir) }
		}
	}
}
	
main module{
	program{
		%%%%%% Goal Management %%%%%%
		if bel(received(manager,goto(X,DIR))) then adopt(atFloor(X), dir(DIR))+delete(received(manager,goto(X,DIR))).
		
		if goal-a( atFloor(L2) ), bel(moving(L1, L2)) then delete(moving(L1, L2)).
		
		% Goto the nearest floor that the agent wants to go to.
		if a-goal( atFloor(L2), dir(Dir)), bel(atFloor(L1)) then goto(L2, Dir) + insert(moving(L1, L2)).
	}
}

event module{
	program{
		%%%%% Percept Processing %%%%%
		forall bel( percept(capacity(N) )) do send(manager, capacity(N) ).
		forall bel( percept(people(N) )) do send(manager, people(N) ).
		forall bel( percept(floorCount(N) )) do send(manager, floorCount(N) ).
		forall bel( percept(carPosition(L) ), carPosition(L2), RoundedL is round(L*4) / 4, not(RoundedL = L2 )) do send(manager, carPosition(RoundedL)) + insert( carPosition(RoundedL) ) + delete(carPosition(L2) ).
		
		% The atFloor(Level) percept is received only when elevator has stopped at a floor Level.
		forall bel( percept(atFloor(Level)), not(atFloor(Level)) ) do send(manager, atFloor(Level) ) + insert( atFloor(Level) ).
		forall bel( atFloor(Level), not(percept(atFloor(Level))) ) do delete( atFloor(Level) ).
		
		% Send to the manager where the client wants to go
		forall bel( percept(eButtonOn(Level)), dir(Dir) ) do send( manager, eButtonOn(Level, Dir) ).

		% The fButton(Level,Dir) percept indicates that the up or down (Dir) button on floor Level has been pressed.
		forall bel( percept(fButtonOn(Level,Dir)), not(fButtonOn(Level,Dir)) ) do send( manager, fButtonOn(Level,Dir) )+insert( fButtonOn(Level,Dir) ).
		forall bel( fButtonOn(Level,Dir), not(percept(fButtonOn(Level,Dir))) ) do send( manager, delFButtonOn(Level, Dir) )+delete( fButtonOn(Level,Dir) ).
		
		% The doorState percept is received only if the door state has changed.
		% So we do not need to check whether the New value is different from the Old value to avoid unnecessary updates.
		forall bel( percept(doorState(New)), doorState(Old) ) do send( manager, doorState(New) )+insert( not(doorState(Old)), doorState(New) ).		
		
		forall bel(sendDir(Dir) ) do send(manager, dir(Dir) ) + delete(sendDir(Dir) ).
		
		forall bel(moveDir(Dir1), sent(moveDir(Dir2)), not(Dir1 = Dir2) ) do send(manager, moveDir(Dir1)) + delete(sent(moveDir(Dir2))).
		
		if not(goal(true)) then send(manager, free).
	}
}

% insert additional modules, if any, here.
