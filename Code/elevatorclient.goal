init module {
	knowledge{
		% insert knowledge here, if any, or remove section.
	}
	
	beliefs{
		% The direction that will be shown to the people at the next stop.
		% This remains the intended direction of movement until there are no more
		% planned stops in that direction.
		dir(down).
		% Initially, it is unknown whether doors are open or closed.
		doorState(unknown).
	}
	
	goals{
		% insert initial goals here, if any, or remove section.
	}
	
	program {
        % insert one-time rules here, or remove section
    }
	
	actionspec{
		% The action goto(Level, Dir) moves the elevator car to floor Level. It can
		% only be performed if the elevator car is docked and not moving, i.e.,
		% atFloor(Here) holds for some Here.
		% When the elevator arrives at the requested floor, the Dir light will turn on.
		goto(Level, Dir) {
		   pre{ atFloor(Here), dir(DirNow) }
		   post{ not(dir(DirNow)), dir(Dir), sendDir(Dir) }
		}
	}
}
	
main module{
	program{
		%%%%%% Goal Management %%%%%%
		if bel(received(manager,goto(X,DIR))) then adopt(atFloor(X), dir(DIR))+delete(received(manager,goto(X,DIR))).
		
		% Goto the nearest floor that the agent wants to go to.
		if a-goal( atFloor(Level), dir(Dir)) then goto(Level, Dir).
	}
}

event module{
	program{
		%%%%% Percept Processing %%%%%
		
		% The atFloor(Level) percept is received only when elevator has stopped at a floor Level.
		forall bel( percept(atFloor(Level)), not(atFloor(Level)) ) do send(manager, atFloor(Level) ) + insert( atFloor(Level) ).
		forall bel( atFloor(Level), not(percept(atFloor(Level))) ) do delete( atFloor(Level) ).
		
		% Send to the manager where the client wants to go
		forall bel( percept(eButtonOn(Level)), dir(Dir) ) do send( manager, eButtonOn(Level, Dir) ).

		% The fButton(Level,Dir) percept indicates that the up or down (Dir) button on floor Level has been pressed.
		forall bel( percept(fButtonOn(Level,Dir)), not(fButtonOn(Level,Dir)) ) do send( manager, fButtonOn(Level,Dir) )+insert( fButtonOn(Level,Dir) ).
		forall bel( fButtonOn(Level,Dir), not(percept(fButtonOn(Level,Dir))) ) do send( manager, delFButtonOn(Level, Dir) )+delete( fButtonOn(Level,Dir) ).
		
		% The doorState percept is received only if the door state has changed.
		% So we do not need to check whether the New value is different from the Old value to avoid unnecessary updates.
		forall bel( percept(doorState(New)), doorState(Old) ) do send( manager, doorState(New) )+insert( not(doorState(Old)), doorState(New) ).		
		
		forall bel(sendDir(Dir) ) do send(manager, dir(Dir) ) + delete(sendDir(Dir) ).
		
		if not(goal(true)) then send(manager, free).
	}
}

% insert additional modules, if any, here.
