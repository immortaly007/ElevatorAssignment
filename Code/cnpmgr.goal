init module {
	knowledge{
		% insert knowledge here, if any, or remove section.
	}
	
	beliefs{
		% insert initial beliefs here, if any, or remove section.
	}
	
	goals{
		% insert initial goals here, if any, or remove section.
	}
	
	program {
        % insert one-time rules here, or remove section
    }
	
	actionspec{
		% insert global action specification here, if any, or remove section.
	}
}
	
main module{
	program{
		% insert action rules here.
		if bel( agent(A), not(me(A)), not(sent(A, goto(8, up))) )
			then send(A,goto(8, up)).
			
		% Receive and save the location of the clients to the believe base
		forall bel( received(A, atFloor(Level)), elevatorAtFloor(A, Level2), not(Level = Level2) ) do insert( elevatorAtFloor(A, Level)) + delete( received(A, atFloor(Level)), elevatorAtFloor(A, Level2) ).
		forall bel( received(A, atFloor(Level)), not(elevatorAtFloor(A, Level2)) ) do insert( elevatorAtFloor(A, Level)) + delete(received(A, atFloor(Level)) ).

		% Receive and save what button the client pressed (eButtonPressed)
		forall bel( received(A,  wannaGo(Level, Dir)) ) do insert( clientWantsToGo(A, Level, Dir) ) + delete( received(A, wannaGo(Level, Dir)) ).
		
	    % fButtonOn processing (independent of elevator/client)
	    forall bel( received(A, fButtonOn(Level, Dir)) ) do insert( fButtonOn(Level, Dir) ) + delete( received(A, fButtonOn(Level, Dir)) ).
		forall bel( received(A, delFButtonOn(Level, Dir)) ) do delete( fButtonOn(Level, Dir), received(A, delFButtonOn(Level, Dir)) ).
		
		% Process the doorstate for each client
		forall bel( received(A, doorState(New)), elevatorDoorState(A, Old), not(Old = New) ) do insert ( elevatorDoorState(A, New) ) + delete( elevatorDoorState(A, Old), received(A, doorState(New)) ).
		forall bel( received(A, doorState(New)), not(elevatorDoorState(A, Old)) ) do insert ( elevatorDoorState(A, New) ) + delete( received(A, doorState(New)) ).
	}
}

% event module{
	% program{
% 
	% }
% }

% insert additional modules, if any, here.
